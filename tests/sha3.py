#!/usr/bin/env python3

import hash_framework.algorithms._sha3 as s
import hash_framework as hf
from hash_framework.boolean import *


def tc_zero_state():
    in_state = ["F"] * 1600
    correct = [



        "TTTTFFFTFFTFFTFTTFFFTTTTFTTTTFFTFTFFFFFFTTTFFFFTTTFTTTFTTTTFFTTTTFFFFTFFTTFTFTFTTTFFTTFFTTTTTFFTFFTTFFTTTTFFFFFFFTFFFTTTTFFFTFTFTTFTFTFTTFFTTFFFFFTFFTTFFFFTTTTFTFTFFTTFFTFTTFTFTFTFTFFTTTTFTTTFTFTTTTFTFFFTFTFTFTFFFTTTFFTTFFFFFTTFTTTTTFFFFFFFFTFFTFFTFTFFTTFTTFFFTFTTFFTFTFFFFTFFTTTFFFFFFTFTFTTFFFTFFTFTFFTTTTFTFFFFFTFTFTTTTTTTTTTTTFFTFTTTTFTFFTFFFFTFTTFTFTTTTTTTTFFFTTTFFTTFTTTTTTFTFTFFTFFTFFFFTTTTTTTFTTTFFTFTTFTFFFFFTFTFFTFFFTFFFTTFFTFFFTTTTTFFFTFFTFFFTTFFFTFTTFTTTTFTTFTFFFFFTTFFTTFTFTTFFFFTTFFTFFTFTTTFFTTTFTTFTFTFTTFTFFTTFFFFTFTFFTTFTTTTFTTTFFFTTFTTFFFTTFFTFFFFFTFTTFFTTTFFFFTTFFFFTFFTFFTTFTFTTFTFTFTTFTTTTTFTFFFFTFFFTTTTTTTTTTFFFTTFFTFFTTTFTFTTFTFTTFTFTFTFTFFTFFTTTTTTFFTFFFTTFFFTFTTTTTFTFTTFFFTTFTFTTFTFTFFTTFTFFTTFTTTFFTTFFFTFFTTFFFFFTTFTFTTTFFFTFFTFFFFTFFFFFFTTTFFFFFFTTFTFFTFTFTTTTTFFFFFTFTTFTTFTTFTTTTFFTTTTFTFTFTFTFTFTTTTTFTFFFFTTTFTTTFFFFFTTFFFTTTFFTTFTFFFFFFTTFTFFFTTTTTFFTFFFFFTFFTTFFFFFFFFTTTTTFFTFFFTFTTTTFFFTTFTFFFFTFFFTTFTFFTFTFTFTFTTFTFFTTTTTFFFFFTFTTTTFFTFTFTTFFFTTFTFTTFTFFFTFFFFTTTFTTFFTTFTFTTTFFTTFFFFTFTTFFTFFTFTTTTTFTTTTTTTFTTTTFFTFTFFFTTFFTTFFTFFTFTTTFFFFTTTTFFTFFTTFFFFTFFTTFTTFFTTTFFFFTFFTFTFTFTTTTFTTTTFFFTFFFTTFFTTFFFFTFFFTTFTTTFFFFTTTTTFFFTFTTFTFFTFTFTFTFTFFTTTTTTFTFFFFFFFFTTTFTTFFTFTTTFFFTTFFFFTTTTTFTTTFTFFFTFFFTFTFFFFTTTFFTTFFTTTTFFTTFFTFTTFFTFFFTFFTFTFFFFFFTTFFFTTTTFFTFFTFFFTFTFTFTTTFFFTTTFTFFFTFFTTFFFFTFTFFFFFTTFFFFTFFFFFTTTTTTFFTFFTFFTFFTFTFFFTFTTFFFTFTFFFFTFFTTTTFFTFFFFFTFTTFTTTTFTFTFFTTFTFTFFTFFTTFTTTFFTTTFFFFFTFFFTTFFTFTTTFFFFTFFTTTFTFTTTTTFTTFFTFFFTFFTTTFTFFTFTTTTTTTFFTTFFFFTFTFFFFTFFTTTFTTTTTFTFTFTTTTFFFTTTTTTTTTFTTTTFTTFTFTTTFFTTTFTTFFTFTFFFTFFTFFTFFT",
    ]
    w = 64
    rounds = 0

    eval_table = {}
    eval_table, out_state = s.sha3p({}, "", w, in_state, 0)
    assert correct[0] == "".join(out_state)

    eval_table, out_state = s.sha3p({}, "", w, out_state, 1)
    assert correct[1].count("F") == "".join(out_state).count("F")

    eval_table, out_state = s.sha3p({}, "", w, out_state, 2)
    assert correct[2] == "".join(out_state)

    eval_table, out_state = s.sha3f({}, "", w, in_state)
    assert correct[3] == "".join(out_state)

    return True


def __main__():
    tests = [tc_zero_state]

    for test in tests:
        ret = test()
        if ret:
            print(test.__name__ + "... OK")
        else:
            print(test.__name__ + "... Failed")
            break


if __name__ == "__main__":
    __main__()
